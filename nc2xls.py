# -*- coding: utf-8 -*-
"""nc2xls.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uD6yzT64Sf12qpeciolfcKLKArqZd09T
"""

!pip install netCDF4

import netCDF4 as nc
import pandas as pd
import numpy as np
import os

import netCDF4 as nc
import pandas as pd
import numpy as np
import os

def extract_data_from_nc(file_path, latitude, longitude):
    """
    Extracts data from a .nc file based on latitude and longitude for all time steps.

    Args:
        file_path (str): Path to the .nc file.
        latitude (float): Desired latitude.
        longitude (float): Desired longitude.

    Returns:
        pandas.DataFrame: Extracted data as a Pandas DataFrame.
    """

    # Open the .nc file
    with nc.Dataset(file_path, 'r') as ds:
        # Read latitude, longitude, time, and data variables
        latitudes = ds.variables['lat'][:]
        longitudes = ds.variables['lon'][:]
        times = ds.variables['time'][:]  # Assuming 'time' is the time variable
        data_variable = ds.variables['timeseries-hd45-annual-mean'][:]

        # Print shapes for debugging
        print(f"Latitudes shape: {latitudes.shape}")
        print(f"Longitudes shape: {longitudes.shape}")
        print(f"Times shape: {times.shape}")
        print(f"Data variable shape: {data_variable.shape}")

        # Find the nearest latitude and longitude indices
        lat_idx = np.argmin(np.abs(latitudes - latitude))
        lon_idx = np.argmin(np.abs(longitudes - longitude))

        # Extract data for all time steps at the specified location
        extracted_data = data_variable[:, lat_idx, lon_idx]

    # Create a Pandas DataFrame
    data = {'Time': times, 'Latitude': [latitude] * len(times),
            'Longitude': [longitude] * len(times), 'Data': extracted_data}
    df = pd.DataFrame(data)

    return df

file_path = '/content/timeseries-hd45-annual-mean_cmip6-x0.25_ensemble-all-ssp585_timeseries-smooth_median_2015-2100.nc'

with nc.Dataset(file_path, 'r') as ds:
    data_variable = ds.variables['time'][:]

    # Get the minimum and maximum values, ignoring masked/fill values
    min_value = np.nanmin(data_variable)
    max_value = np.nanmax(data_variable)

    print(f"Minimum value: {min_value}")
    print(f"Maximum value: {max_value}")

with nc.Dataset('/content/timeseries-hd45-annual-mean_cmip6-x0.25_ensemble-all-ssp585_timeseries-smooth_median_2015-2100.nc', 'r') as ds:
  print(ds.variables.keys())

# Example usage
file_path = '/content/timeseries-hd45-annual-mean_cmip6-x0.25_ensemble-all-historical_timeseries_median_1950-2014.nc'  # Replace with the actual path
latitude = 36.45
longitude = 116.86

extracted_df = extract_data_from_nc(file_path, latitude, longitude)

# Export to Excel
extracted_df.to_excel('/content/timeseries-hd45-annual-mean_cmip6-x0.25_ensemble-all-historical_timeseries_median_1950-2014US.xlsx', index=False)

